---

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Getting backup-user credentials"
  ansible.builtin.set_fact:
    backup_pwd: "{{ backup.creds.pwd | default(lookup('password', tmp_pwd_pref + name + '_bak chars=ascii_letters,digits length=' + random_pwd_length), true) }}"
    backup_user: "{{ backup.creds.user | default('backup_' + name, true) }}"
  tags: [instances, users, config, backup]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Creating service-user"
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ backup_pwd }}"
    update_password: "{% if force_pwd_change %}always{% else %}on_create{% endif %}"  # changing the password always might bring problems with active-active replications
    priv: "{{ mariadb_backup_privileges }}"
    state: 'present'
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
  no_log: true
  register: backup_user_update
  when:
    - not mariadb_instance_ro
    - backup.creds.create | default(false, true)
  tags: [instances, backup, users]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Configuring backup credentials"
  ansible.builtin.template:
    src: 'templates/etc/mysql/instance.conf.d/client.cnf.j2'
    dest: "{{ MARIADB_CONFIG.config.path_config }}/client_{{ name }}_backup.cnf"
    owner: "{{ instance.settings.user }}"
    group: "{{ instance.settings.group }}"
    mode: 0400
  no_log: true
  vars:
    user: "{{ backup_user }}"
    pwd: "{{ backup_pwd }}"
  when: >
    (backup.creds.create | default(false, true) and backup_user_update.changed) or
    (backup.creds.pwd is defined and backup.creds.pwd | default(none, true) is not none)
  tags: [instances, users, backup, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Checking for backup credential-file"
  ansible.builtin.set_fact:
    backup_defaults_file: "{{ backup.creds.defaults_file | default(MARIADB_CONFIG.config.path_config + '/client_' + name + '_backup.cnf', true) }}"
  when: >
    backup.creds.create | default(false, true) or
    (backup.creds.pwd is defined and backup.creds.pwd | default(none, true) is not none) or
    (backup.creds.defaults_file is defined and backup.creds.defaults_file | default(none, true) is not none)
  tags: [instances, backup, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Copying backup script"
  ansible.builtin.template:
    src: 'templates/usr/local/sbin/backup.sh.j2'
    dest: "/usr/local/sbin/backup_mariadb_{{ name }}.sh"
    mode: 0755
  tags: [instances, backup, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Configuring backup service"
  ansible.builtin.template:
    src: "templates/etc/systemd/system/backup-mariadb.{{ item }}.j2"
    dest: "/etc/systemd/system/ansibleguy.infra_mariadb-backup-{{ name }}.{{ item }}"
    mode: 0644
  loop:
    - 'service'
    - 'timer'
  tags: [instances, backup, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Enabling/Starting backup timer"
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "ansibleguy.infra_mariadb-backup-{{ name }}.timer"
    enabled: yes
    state: started
  tags: [instances, backup]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Backup | Cleaning up temporary password file"
  ansible.builtin.file:
    path: "{{ tmp_pwd_pref }}{{ name }}_bak"
    state: absent
  delegate_to: localhost
  become: false
  changed_when: false
