---

# if the initialization fails: you might need to manually remove the datadir else the initialization will not work!
#   rm -rf /var/lib/mysql/instance_{KEY} => would be the default for that action

- name: Checking if config exists
  ansible.builtin.stat:
    path: "{{ MARIADB_CONFIG.config.path_config }}/server_{{ name }}.cnf"
  register: mariadb_config_raw

- name: Getting configured port
  ansible.builtin.shell: "cat {{ MARIADB_CONFIG.config.path_config }}/server_{{ name }}.cnf | grep port | cut -d '=' -f2 | xargs"
  register: mariadb_port_existing_raw
  changed_when: false
  check_mode: false
  when: mariadb_config_raw.stat.exists

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting free port as exists"
  ansible.builtin.set_fact:
    mariadb_port: "{{ mariadb_port_existing_raw.stdout }}"
  when:
    - mariadb_config_raw.stat.exists
    - mariadb_port_existing_raw is defined
    - mariadb_port_existing_raw.stdout is defined
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Checking if configured port is free"
  ansible.builtin.command: "/usr/bin/python3 /etc/mysql/check_port.py {{ MARIADB_CONFIG.config.path_config }} {{ instance.settings.port }}"
  register: mariadb_port_free_raw
  changed_when: false
  check_mode: false
  when:
    - not mariadb_config_raw.stat.exists
    - instance.settings.port | default(none, true) is not none
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Getting free port"
  ansible.builtin.command: "/usr/bin/python3 /etc/mysql/check_port.py {{ MARIADB_CONFIG.config.path_config }}"
  register: mariadb_port_raw
  changed_when: false
  check_mode: false
  when: >
    not mariadb_config_raw.stat.exists and
    (instance.settings.port | default(none, true) is none or
    (mariadb_port_free_raw is defined and mariadb_port_free_raw.stdout == '1'))
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting free port"
  ansible.builtin.set_fact:
    mariadb_port: "{{ mariadb_port_raw.stdout }}"
  when:
    - not mariadb_config_raw.stat.exists
    - mariadb_port_raw is defined
    - mariadb_port_raw.stdout is defined
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting port as configured"
  ansible.builtin.set_fact:
    mariadb_port: "{{ mariadb_port_raw.stdout }}"
  when: mariadb_port is undefined

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Creating ssl directory"
  ansible.builtin.file:
    path: "{{ MARIADB_CONFIG.config.path_ssl }}/{{ name }}"
    owner: "{{ instance.settings.user }}"
    group: "{{ instance.settings.group }}"
    state: directory
    mode: 0750
  when: instance.ssl
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Creating instance directories"
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ instance.settings.user }}"
    group: "{{ instance.settings.group }}"
    state: directory
    recurse: "{{ item.recurse }}"
    mode: 0750
  loop:
    - {path: "{{ path_data }}", recurse: true}  # we expect that this directory will ONLY be used for this database; anything other would be bad practise
    - {path: "{{ path_backup }}", recurse: false}
  tags: [instances]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Configuring mariadb instance"
  ansible.builtin.template:
    src: 'templates/etc/mysql/instance.conf.d/instance.cnf.j2'
    dest: "{{ MARIADB_CONFIG.config.path_config }}/server_{{ name }}.cnf"
  no_log: true
  tags: [instances, config]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Checking if instance is initialized"
  ansible.builtin.stat:
    path: "{{ path_data }}/mysql"
  register: mariadb_instance_initialized
  tags: [instances, users, config, dbs]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Initializing instance"
  ansible.builtin.shell: "mysql_install_db --user={{ instance.settings.user }} --datadir={{ path_data }}"
  when: not mariadb_instance_initialized.stat.exists
  tags: [instances]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Enabling/Starting instance service"
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "mariadb@{{ name }}.service"
    enabled: yes
    state: started
  tags: [instances]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Checking if instance is read-only (replication slave)"
  community.mysql.mysql_query:
    query: 'SELECT @@global.read_only'
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
  register: mariadb_instance_ro_raw
  when: mariadb_instance_initialized.stat.exists
  tags: [instances, users, dbs]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting r/o state"
  ansible.builtin.set_fact:
    mariadb_instance_ro: "{{ mariadb_instance_ro_raw['query_result'][0][0]['@@global.read_only'] | bool }}"
    mariadb_instance_ro_name: "{{ name }}"
  when: mariadb_instance_initialized.stat.exists
  tags: [instances, users, dbs]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting r/o default"
  ansible.builtin.set_fact:
    mariadb_instance_ro: false
  when: >
    mariadb_instance_ro is undefined or
    mariadb_instance_ro_name != name
  tags: [instances, users, dbs]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Running secure-installation tasks"
  community.mysql.mysql_query:
    login_unix_socket: "{{ socket }}"
    login_user: 'root'
    query:
    - "DELETE FROM mysql.user WHERE User=''"
    - "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
    - 'DROP DATABASE IF EXISTS test'
    - "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'"
    - 'FLUSH PRIVILEGES'
    single_transaction: yes
  when:
    - not mariadb_instance_initialized.stat.exists
    - configure_secure
  tags: [instances]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting root password (if provided)"
  community.mysql.mysql_user:
    name: 'root'
    password: "{{ instance.root_pwd }}"
    state: 'present'
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
    update_password: 'always'
  no_log: true
  ignore_errors: true
  register: root_pwd_update
  when:
    - instance.root_pwd | default(none, true) is not none
    - not mariadb_instance_ro
  tags: [instances, users]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Setting root password (if provided) [without pwd]"
  community.mysql.mysql_user:
    name: 'root'
    password: "{{ instance.root_pwd }}"
    state: 'present'
    login_unix_socket: "{{ socket }}"
    login_user: 'root'
    update_password: "{% if force_pwd_change %}always{% else %}on_create{% endif %}"
  no_log: true
  register: root_pwd_update_wopwd
  when:
    - instance.root_pwd | default(none, true) is not none
    - not mariadb_instance_ro
    - root_pwd_update.failed is defined
    - root_pwd_update.failed  # could be that the authentication failed since the ansible-user is not yet configured as expected
  tags: [instances, users]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Flushing privileges"
  community.mysql.mysql_query:
    query: 'FLUSH PRIVILEGES'
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
  when: >
    (root_pwd_update is defined and root_pwd_update.changed is defined and root_pwd_update.changed) or
    (root_pwd_update_wopwd is defined and root_pwd_update_wopwd.changed is defined and root_pwd_update_wopwd.changed)

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Creating databases"
  community.mysql.mysql_db:
    name: "{{ item.key }}"
    state: "{% if item.value.state | default('') in ['present', 'absent'] %}{{ item.value.state }}{% else %}present{% endif %}"
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
  with_dict: "{{ instance.dbs }}"
  no_log: true
  when:
    - instance.dbs | length > 0
    - not mariadb_instance_ro
  tags: [instances, dbs]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Managing users"
  community.mysql.mysql_user:
    name: "{{ item.key }}"
    password: "{{ item.value.pwd }}"
    update_password: "{% if force_pwd_change %}always{% else %}{{ item.value.update_pwd | default('on_create', true) }}{% endif %}"
    priv: "{{ item.value.priv | default('') }}"
    state: "{% if item.value.state | default('') in ['present', 'absent'] %}{{ item.value.state }}{% else %}present{% endif %}"
    login_unix_socket: "{{ socket }}"
    login_user: "{{ instance.ansible_user }}"
    login_password: "{{ instance | mgmt_pwd }}"
  when:
    - instance.users | length > 0
    - not mariadb_instance_ro
    - item.key | default(none, true) is not none
  with_dict: "{{ instance.users }}"
  no_log: true
  tags: [instances, users]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Configuring startup-checks"
  ansible.builtin.include_tasks: add_startup-checks.yml
  no_log: true
  tags: [instances, config, users]

- name: "MariaDB | Debian | Add Instance '{{ name }}' | Configuring backup"
  ansible.builtin.include_tasks: add_backup.yml
  no_log: true
  when: >
    configure_backup or
    backup.enabled
  tags: [instances, config, backup, users]
